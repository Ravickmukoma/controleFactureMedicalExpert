Attribute VB_Name = "ModuleControleMedicalExpert"
' ===================================================================
' MODULE VBA - CONTR√îLE M√âDICAL EXPERT
' ===================================================================
' Bas√© sur connaissances m√©dicales approfondies et normes internationales
' OMS, HAS, FDA, ANSM, Soci√©t√©s savantes m√©dicales
' ===================================================================

Option Explicit

' Variables globales
Public Const FEUILLE_REFERENTIEL As String = "ReferentielEnrichi"
Public Const FEUILLE_SAISIE As String = "SaisieFactures"
Public Const FEUILLE_SURVEILLANCE As String = "SurveillanceIntelligente"
Public Const FEUILLE_VALIDATION As String = "ValidationManuelle"
Public Const FEUILLE_ALERTES As String = "AlertesAutomatiques"
Public Const FEUILLE_DASHBOARD As String = "StatistiquesDashboard"

' ===================================================================
' INITIALISATION DU SYST√àME EXPERT
' ===================================================================
Public Sub InitialiserSystemeExpert()
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo ErrorHandler
    
    MsgBox "üè• INITIALISATION SYST√àME CONTR√îLE M√âDICAL EXPERT" & vbCrLf & vbCrLf & _
           "‚úÖ Chargement base de connaissances m√©dicales..." & vbCrLf & _
           "‚úÖ Configuration r√®gles OMS/HAS/FDA/ANSM..." & vbCrLf & _
           "‚úÖ Activation surveillance intelligente...", vbInformation, "Syst√®me Expert M√©dical"
    
    ' V√©rifier structure et charger base de connaissances
    If Not VerifierStructureComplete() Then
        MsgBox "‚ùå Structure syst√®me incompl√®te!", vbCritical
        Exit Sub
    End If
    
    ' Initialiser la base de connaissances m√©dicales
    InitialiserBaseConnaissancesMedicales
    
    ' Configurer les alertes automatiques
    ConfigurerAlertesAutomatiques
    
    ' Activer la surveillance temps r√©el
    ActiverSurveillanceTempsReel
    
    MsgBox "üéâ SYST√àME EXPERT INITIALIS√â!" & vbCrLf & vbCrLf & _
           "üìä " & CompterActesReferentiel() & " actes avec r√®gles m√©dicales" & vbCrLf & _
           "üß† Base de connaissances m√©dicales activ√©e" & vbCrLf & _
           "üîç Surveillance intelligente op√©rationnelle", vbInformation, "Initialisation Termin√©e"
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Exit Sub
    
ErrorHandler:
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    MsgBox "‚ùå Erreur initialisation: " & Err.Description, vbCritical
End Sub

' ===================================================================
' CONTR√îLE EXPERT COMPLET
' ===================================================================
Public Sub LancerControleExpertComplet()
    Application.ScreenUpdating = False
    
    On Error GoTo ErrorHandler
    
    Dim wsFactures As Worksheet, wsSurveillance As Worksheet
    Dim derniereLigne As Long, i As Long
    Dim anomaliesDetectees As Long, anomaliesCritiques As Long
    Dim startTime As Double
    
    startTime = Timer
    
    Set wsFactures = ThisWorkbook.Worksheets(FEUILLE_SAISIE)
    Set wsSurveillance = ThisWorkbook.Worksheets(FEUILLE_SURVEILLANCE)
    
    ' V√©rifier donn√©es
    derniereLigne = wsFactures.Cells(wsFactures.Rows.Count, 1).End(xlUp).Row
    If derniereLigne <= 1 Then
        MsgBox "‚ö†Ô∏è Aucune facture √† contr√¥ler!", vbExclamation
        Exit Sub
    End If
    
    ' Effacer anciennes anomalies
    EffacerAnciennesAnomalies
    
    anomaliesDetectees = 0
    anomaliesCritiques = 0
    
    ' Contr√¥le expert de chaque facture
    For i = 2 To derniereLigne
        Dim resultats As Variant
        resultats = ControlerFactureExpert(i)
        
        anomaliesDetectees = anomaliesDetectees + resultats(0)
        anomaliesCritiques = anomaliesCritiques + resultats(1)
        
        ' Afficher progr√®s
        If i Mod 50 = 0 Then
            Application.StatusBar = "Contr√¥le expert... " & i - 1 & "/" & derniereLigne - 1 & " factures"
        End If
    Next i
    
    ' Post-traitement expert
    EffectuerAnalysesComplementaires
    FormaterResultatsExpert
    MettreAJourDashboardExpert
    
    ' G√©n√©rer alertes si n√©cessaire
    If anomaliesCritiques > 0 Then
        GenererAlertesAutomatiques anomaliesCritiques
    End If
    
    Dim dureeControle As Double
    dureeControle = Timer - startTime
    
    ' Enregistrer dans historique
    EnregistrerDansHistorique derniereLigne - 1, anomaliesDetectees, dureeControle
    
    Application.StatusBar = False
    Application.ScreenUpdating = True
    
    ' Message final expert
    If anomaliesDetectees > 0 Then
        MsgBox "üîç CONTR√îLE EXPERT TERMIN√â!" & vbCrLf & vbCrLf & _
               "üìä Factures analys√©es: " & derniereLigne - 1 & vbCrLf & _
               "üö® Anomalies d√©tect√©es: " & anomaliesDetectees & vbCrLf & _
               "‚ö†Ô∏è Anomalies critiques: " & anomaliesCritiques & vbCrLf & _
               "‚è±Ô∏è Dur√©e: " & Format(dureeControle, "0.0") & " secondes" & vbCrLf & vbCrLf & _
               "‚û°Ô∏è Consultez 'SurveillanceIntelligente' pour d√©tails", vbInformation, "Contr√¥le Expert"
    Else
        MsgBox "‚úÖ CONTR√îLE EXPERT TERMIN√â!" & vbCrLf & vbCrLf & _
               "üìä Factures analys√©es: " & derniereLigne - 1 & vbCrLf & _
               "üéâ Aucune anomalie d√©tect√©e!" & vbCrLf & _
               "‚è±Ô∏è Dur√©e: " & Format(dureeControle, "0.0") & " secondes" & vbCrLf & vbCrLf & _
               "Conformit√© parfaite aux normes m√©dicales.", vbInformation, "Contr√¥le Expert"
    End If
    
    Exit Sub
    
ErrorHandler:
    Application.ScreenUpdating = True
    Application.StatusBar = False
    MsgBox "‚ùå Erreur contr√¥le expert: " & Err.Description, vbCritical
End Sub

' ===================================================================
' CONTR√îLE EXPERT D'UNE FACTURE
' ===================================================================
Private Function ControlerFactureExpert(ligne As Long) As Variant
    Dim wsFactures As Worksheet, wsReferentiel As Worksheet
    Dim anomalies As Long, anomaliesCritiques As Long
    Dim codeActe As String, libelleFacture As String, nomPatient As String
    Dim dateFacture As Date, prixUnitaire As Double, quantite As Double, prixTotal As Double
    
    Set wsFactures = ThisWorkbook.Worksheets(FEUILLE_SAISIE)
    Set wsReferentiel = ThisWorkbook.Worksheets(FEUILLE_REFERENTIEL)
    
    anomalies = 0
    anomaliesCritiques = 0
    
    ' R√©cup√©rer donn√©es facture
    On Error Resume Next
    dateFacture = CDate(wsFactures.Cells(ligne, 1).Value)
    nomPatient = Trim(wsFactures.Cells(ligne, 2).Value)
    codeActe = Trim(wsFactures.Cells(ligne, 5).Value)
    libelleFacture = Trim(wsFactures.Cells(ligne, 6).Value)
    prixUnitaire = CDbl(wsFactures.Cells(ligne, 7).Value)
    quantite = CDbl(wsFactures.Cells(ligne, 8).Value)
    prixTotal = CDbl(wsFactures.Cells(ligne, 9).Value)
    On Error GoTo 0
    
    ' === CONTR√îLES CRITIQUES ===
    
    ' 1. Code manquant - Recherche par libell√©
    If codeActe = "" Then
        codeActe = RechercherCodeParLibelle(libelleFacture)
        If codeActe = "" Then
            AjouterAnomalieExpert nomPatient, "", libelleFacture, "Code inexistant", "CRITIQUE", _
                                 "Code acte manquant et libell√© non trouv√© dans r√©f√©rentiel m√©dical", _
                                 "Code acte valide ou libell√© exact", "Code vide + libell√©: " & libelleFacture, _
                                 prixTotal, "V√©rifier nomenclature m√©dicale", "Imm√©diat", "URGENT"
            anomalies = anomalies + 1
            anomaliesCritiques = anomaliesCritiques + 1
        End If
    End If
    
    ' === CONTR√îLES √âLEV√âS ===
    
    ' 2. D√©passement tarifaire (priorit√© selon sp√©cifications)
    If codeActe <> "" Then
        Dim prixTarifaire As Double
        prixTarifaire = ObtenirPrixTarifaire(codeActe)
        If prixTarifaire > 0 And prixUnitaire > prixTarifaire Then
            AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "D√©passement tarifaire", "√âLEV√â", _
                                 "Prix factur√© (" & prixUnitaire & " USD) sup√©rieur au tarif contractuel (" & prixTarifaire & " USD)", _
                                 "Prix ‚â§ " & prixTarifaire & " USD", "Prix factur√©: " & prixUnitaire & " USD", _
                                 prixTotal, "Appliquer tarif contractuel ou justifier d√©passement", "48h", "√âLEV√â"
            anomalies = anomalies + 1
        End If
    End If
    
    ' 3. Quantit√© invalide
    If quantite <= 0 Then
        AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "Quantit√© invalide", "√âLEV√â", _
                             "Quantit√© nulle ou n√©gative (" & quantite & ") - Impossible m√©dicalement", _
                             "Quantit√© > 0", "Quantit√©: " & quantite, prixTotal, _
                             "Corriger la quantit√©", "48h", "√âLEV√â"
        anomalies = anomalies + 1
    End If
    
    ' 4. Contr√¥les selon r√®gles m√©dicales expertes
    If codeActe <> "" Then
        Dim resultatsExpert As Variant
        resultatsExpert = ControlerSelonExpertiseMedicale(nomPatient, codeActe, libelleFacture, dateFacture, quantite, prixUnitaire, prixTotal, ligne)
        anomalies = anomalies + resultatsExpert(0)
        anomaliesCritiques = anomaliesCritiques + resultatsExpert(1)
    End If
    
    ' === CONTR√îLES MOD√âR√âS ===
    
    ' 5. Erreur de calcul (TR√àS IMPORTANT selon sp√©cifications)
    If Abs(prixUnitaire * quantite - prixTotal) > 0.01 Then
        Dim calculAttendu As Double
        calculAttendu = prixUnitaire * quantite
        AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "Erreur de calcul", "MOD√âR√â", _
                             "Erreur arithm√©tique: " & prixUnitaire & " √ó " & quantite & " = " & calculAttendu & " ‚â† " & prixTotal, _
                             "P.T. = " & calculAttendu & " USD", "P.T. factur√©: " & prixTotal & " USD", _
                             prixTotal, "Corriger le calcul imm√©diatement", "72h", "MOYEN"
        anomalies = anomalies + 1
    End If
    
    ControlerFactureExpert = Array(anomalies, anomaliesCritiques)
End Function

' ===================================================================
' CONTR√îLES SELON EXPERTISE M√âDICALE AVANC√âE
' ===================================================================
Private Function ControlerSelonExpertiseMedicale(nomPatient As String, codeActe As String, libelleFacture As String, _
                                                 dateFacture As Date, quantite As Double, prixUnitaire As Double, _
                                                 prixTotal As Double, ligneFacture As Long) As Variant
    Dim wsReferentiel As Worksheet
    Dim ligneRef As Long, anomalies As Long, anomaliesCritiques As Long
    Dim categorieMedicale As String, sousCategorie As String
    Dim qtyMaxJour As Long, qtyMaxMois As Long, qtyMaxVie As Long
    Dim delaiMinJours As Long, actesNonCumulables As String
    Dim niveauRisque As String, regleMedicale As String
    
    Set wsReferentiel = ThisWorkbook.Worksheets(FEUILLE_REFERENTIEL)
    anomalies = 0
    anomaliesCritiques = 0
    
    ' Trouver acte dans r√©f√©rentiel
    ligneRef = TrouverActeReferentiel(codeActe)
    If ligneRef = 0 Then Exit Function
    
    ' R√©cup√©rer donn√©es m√©dicales
    categorieMedicale = wsReferentiel.Cells(ligneRef, 4).Value
    sousCategorie = wsReferentiel.Cells(ligneRef, 5).Value
    qtyMaxJour = wsReferentiel.Cells(ligneRef, 6).Value
    qtyMaxMois = wsReferentiel.Cells(ligneRef, 7).Value
    qtyMaxVie = wsReferentiel.Cells(ligneRef, 8).Value
    delaiMinJours = wsReferentiel.Cells(ligneRef, 9).Value
    actesNonCumulables = wsReferentiel.Cells(ligneRef, 10).Value
    niveauRisque = wsReferentiel.Cells(ligneRef, 13).Value
    regleMedicale = wsReferentiel.Cells(ligneRef, 14).Value
    
    ' === CONTR√îLES SP√âCIALIS√âS PAR CAT√âGORIE M√âDICALE ===
    
    Select Case categorieMedicale
        Case "Chirurgie"
            anomalies = anomalies + ControlerChirurgie(nomPatient, codeActe, libelleFacture, sousCategorie, dateFacture, quantite, prixTotal, qtyMaxJour, qtyMaxMois, delaiMinJours)
            
        Case "Imagerie m√©dicale"
            anomalies = anomalies + ControlerImagerieMedicale(nomPatient, codeActe, libelleFacture, sousCategorie, dateFacture, quantite, prixTotal, qtyMaxJour, qtyMaxMois)
            
        Case "Examens biologiques"
            anomalies = anomalies + ControlerExamensBiologiques(nomPatient, codeActe, libelleFacture, dateFacture, quantite, prixTotal, qtyMaxJour, qtyMaxMois)
            
        Case "Consultations m√©dicales"
            anomalies = anomalies + ControlerConsultations(nomPatient, codeActe, libelleFacture, sousCategorie, dateFacture, quantite, prixTotal, qtyMaxJour)
            
        Case "Urgences m√©dicales"
            anomalies = anomalies + ControlerUrgences(nomPatient, codeActe, libelleFacture, dateFacture, quantite, prixTotal, qtyMaxJour)
            
        Case "Actes gyn√©cologiques"
            anomalies = anomalies + ControlerGynecologie(nomPatient, codeActe, libelleFacture, sousCategorie, dateFacture, quantite, prixTotal, qtyMaxVie, delaiMinJours)
            
        Case "M√©dicaments essentiels"
            anomalies = anomalies + ControlerMedicaments(nomPatient, codeActe, libelleFacture, dateFacture, quantite, prixTotal, qtyMaxJour, qtyMaxMois)
            
        Case "Produits anesth√©siques"
            anomalies = anomalies + ControlerAnesthesie(nomPatient, codeActe, libelleFacture, dateFacture, quantite, prixTotal, ligneFacture)
    End Select
    
    ' === CONTR√îLES G√âN√âRAUX AVANC√âS ===
    
    ' Quantit√© excessive selon normes m√©dicales
    If quantite > qtyMaxJour Then
        AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "Quantit√© excessive", "MOD√âR√â", _
                             "Quantit√© (" & quantite & ") d√©passe maximum autoris√© par jour (" & qtyMaxJour & ") selon normes " & categorieMedicale, _
                             "Quantit√© max/jour: " & qtyMaxJour, "Quantit√© factur√©e: " & quantite, prixTotal, _
                             "Justifier d√©passement m√©dical ou fractionner", "72h", "MOYEN"
        anomalies = anomalies + 1
    End If
    
    ' D√©tection doublons intelligente
    If DetecterDoublonIntelligent(nomPatient, codeActe, dateFacture, ligneFacture) Then
        AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "Doublon d√©tect√©", "√âLEV√â", _
                             "M√™me patient, m√™me acte, dates rapproch√©es - Possible double facturation", _
                             "Acte unique dans d√©lai minimum", "Doublon d√©tect√©", prixTotal, _
                             "V√©rifier justification m√©dicale", "48h", "√âLEV√â"
        anomalies = anomalies + 1
    End If
    
    ' Cumul excessif selon r√®gles temporelles
    If VerifierCumulExcessif(nomPatient, codeActe, dateFacture, quantite, qtyMaxMois, ligneFacture) Then
        AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "Cumul excessif", "√âLEV√â", _
                             "Cumul mensuel d√©passe maximum autoris√© (" & qtyMaxMois & ") selon protocole m√©dical", _
                             "Cumul max/mois: " & qtyMaxMois, "Cumul d√©tect√© d√©passant", prixTotal, _
                             "Justifier n√©cessit√© m√©dicale", "48h", "√âLEV√â"
        anomalies = anomalies + 1
    End If
    
    ControlerSelonExpertiseMedicale = Array(anomalies, anomaliesCritiques)
End Function

' ===================================================================
' CONTR√îLES SP√âCIALIS√âS PAR DOMAINE M√âDICAL
' ===================================================================

Private Function ControlerChirurgie(nomPatient As String, codeActe As String, libelleFacture As String, _
                                   sousCategorie As String, dateFacture As Date, quantite As Double, _
                                   prixTotal As Double, qtyMaxJour As Long, qtyMaxMois As Long, delaiMinJours As Long) As Long
    Dim anomalies As Long
    anomalies = 0
    
    ' R√®gles chirurgicales sp√©cifiques selon HAS et soci√©t√©s savantes
    Select Case sousCategorie
        Case "Chirurgie cardiaque"
            ' R√®gles cardio-thoraciques (SFC, SFCTCV)
            If quantite > 1 Then
                AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "Chirurgie cardiaque multiple", "CRITIQUE", _
                                     "Plusieurs interventions cardiaques m√™me jour - Risque vital majeur", _
                                     "Maximum 1 intervention/jour", "Quantit√©: " & quantite, prixTotal, _
                                     "V√©rification √©quipe cardiochirurgicale urgente", "Imm√©diat", "URGENT"
                anomalies = anomalies + 1
            End If
            
        Case "Neurochirurgie"
            ' R√®gles neurochirurgicales (SFNC)
            If quantite > 1 Then
                AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "Neurochirurgie multiple", "CRITIQUE", _
                                     "Plusieurs interventions neurochirurgicales - Protocole s√©curit√© non respect√©", _
                                     "Maximum 1 intervention/s√©ance", "Quantit√©: " & quantite, prixTotal, _
                                     "Validation neurochirurgien senior obligatoire", "Imm√©diat", "URGENT"
                anomalies = anomalies + 1
            End If
            
        Case "Chirurgie orthop√©dique"
            ' R√®gles orthop√©diques (SOFCOT)
            If InStr(LCase(libelleFacture), "proth√®se") > 0 And quantite > 1 Then
                AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "Proth√®ses multiples", "√âLEV√â", _
                                     "Pose multiple proth√®ses m√™me s√©ance - V√©rifier indication", _
                                     "G√©n√©ralement 1 proth√®se/intervention", "Quantit√©: " & quantite, prixTotal, _
                                     "Justification orthop√©dique requise", "48h", "√âLEV√â"
                anomalies = anomalies + 1
            End If
    End Select
    
    ' V√©rification d√©lai post-op√©ratoire
    If VerifierDelaiPostOperatoire(nomPatient, codeActe, dateFacture, delaiMinJours) Then
        AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "D√©lai post-op√©ratoire", "√âLEV√â", _
                             "Intervention trop rapproch√©e - D√©lai cicatrisation non respect√©", _
                             "D√©lai minimum: " & delaiMinJours & " jours", "D√©lai insuffisant", prixTotal, _
                             "Justifier urgence m√©dicale", "48h", "√âLEV√â"
        anomalies = anomalies + 1
    End If
    
    ControlerChirurgie = anomalies
End Function

Private Function ControlerImagerieMedicale(nomPatient As String, codeActe As String, libelleFacture As String, _
                                          sousCategorie As String, dateFacture As Date, quantite As Double, _
                                          prixTotal As Double, qtyMaxJour As Long, qtyMaxMois As Long) As Long
    Dim anomalies As Long
    anomalies = 0
    
    ' R√®gles radioprotection (IRSN, ASN)
    If InStr(LCase(libelleFacture), "scanner") > 0 Or InStr(LCase(libelleFacture), "irm") > 0 Then
        ' Contr√¥le exposition radiologique
        If VerifierExpositionRadiologique(nomPatient, codeActe, dateFacture, quantite) Then
            AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "Surexposition radiologique", "√âLEV√â", _
                                 "Cumul examens irradiants d√©passe seuils radioprotection", _
                                 "Respect protocole ALARA", "Surexposition d√©tect√©e", prixTotal, _
                                 "Justification radiologique obligatoire", "48h", "√âLEV√â"
            anomalies = anomalies + 1
        End If
    End If
    
    ' R√®gles justification (HAS)
    If quantite > qtyMaxJour Then
        AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "Imagerie excessive", "MOD√âR√â", _
                             "Nombre examens/jour d√©passe recommandations HAS", _
                             "Maximum " & qtyMaxJour & " examens/jour", "Quantit√©: " & quantite, prixTotal, _
                             "Justifier indication m√©dicale", "72h", "MOYEN"
        anomalies = anomalies + 1
    End If
    
    ControlerImagerieMedicale = anomalies
End Function

Private Function ControlerExamensBiologiques(nomPatient As String, codeActe As String, libelleFacture As String, _
                                            dateFacture As Date, quantite As Double, prixTotal As Double, _
                                            qtyMaxJour As Long, qtyMaxMois As Long) As Long
    Dim anomalies As Long
    anomalies = 0
    
    ' R√®gles biologiques (SFBC, CNBH)
    If quantite > qtyMaxJour Then
        AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "Analyses excessives", "MOD√âR√â", _
                             "Nombre analyses/jour d√©passe protocole laboratoire", _
                             "Maximum " & qtyMaxJour & " analyses/jour", "Quantit√©: " & quantite, prixTotal, _
                             "V√©rifier prescription m√©dicale", "72h", "MOYEN"
        anomalies = anomalies + 1
    End If
    
    ' D√©tection doublons biologiques m√™me jour
    If VerifierDoublonBiologique(nomPatient, codeActe, dateFacture) Then
        AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "Doublon biologique", "√âLEV√â", _
                             "M√™me analyse r√©p√©t√©e m√™me jour - Redondance non justifi√©e", _
                             "Analyse unique/jour sauf urgence", "Doublon d√©tect√©", prixTotal, _
                             "Justifier r√©p√©tition analyse", "48h", "√âLEV√â"
        anomalies = anomalies + 1
    End If
    
    ControlerExamensBiologiques = anomalies
End Function

Private Function ControlerConsultations(nomPatient As String, codeActe As String, libelleFacture As String, _
                                       sousCategorie As String, dateFacture As Date, quantite As Double, _
                                       prixTotal As Double, qtyMaxJour As Long) As Long
    Dim anomalies As Long
    anomalies = 0
    
    ' R√®gles consultations (CNOM, HAS)
    If quantite > qtyMaxJour Then
        AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "Consultations excessives", "MOD√âR√â", _
                             "Nombre consultations/jour d√©passe usage m√©dical standard", _
                             "Maximum " & qtyMaxJour & " consultations/jour", "Quantit√©: " & quantite, prixTotal, _
                             "Justifier n√©cessit√© m√©dicale", "72h", "MOYEN"
        anomalies = anomalies + 1
    End If
    
    ' Contr√¥le sp√©cialis√© p√©diatrie
    If sousCategorie = "P√©diatrie" Then
        ' V√©rification coh√©rence √¢ge (simulation bas√©e sur pr√©nom)
        If DetecterIncoh√©renceAge(nomPatient, "p√©diatrie") Then
            AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "√Çge inappropri√©", "√âLEV√â", _
                                 "Consultation p√©diatrique pour patient apparemment adulte", _
                                 "Patient < 18 ans", "Patient probablement adulte", prixTotal, _
                                 "V√©rifier √¢ge patient", "48h", "√âLEV√â"
            anomalies = anomalies + 1
        End If
    End If
    
    ControlerConsultations = anomalies
End Function

Private Function ControlerUrgences(nomPatient As String, codeActe As String, libelleFacture As String, _
                                  dateFacture As Date, quantite As Double, prixTotal As Double, qtyMaxJour As Long) As Long
    Dim anomalies As Long
    anomalies = 0
    
    ' R√®gles urgences (SFMU, SAMU)
    If quantite > qtyMaxJour Then
        AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "Urgences multiples", "√âLEV√â", _
                             "Passages multiples urgences m√™me jour - V√©rifier organisation soins", _
                             "Maximum " & qtyMaxJour & " passages/jour", "Quantit√©: " & quantite, prixTotal, _
                             "Justifier urgences r√©p√©t√©es", "48h", "√âLEV√â"
        anomalies = anomalies + 1
    End If
    
    ControlerUrgences = anomalies
End Function

Private Function ControlerGynecologie(nomPatient As String, codeActe As String, libelleFacture As String, _
                                     sousCategorie As String, dateFacture As Date, quantite As Double, _
                                     prixTotal As Double, qtyMaxVie As Long, delaiMinJours As Long) As Long
    Dim anomalies As Long
    anomalies = 0
    
    ' R√®gles gyn√©cologiques (CNGOF, HAS)
    If InStr(LCase(libelleFacture), "hyst√©rectomie") > 0 Then
        ' Contr√¥le hyst√©rectomie (acte irr√©versible)
        If VerifierActeIrreversible(nomPatient, codeActe, "hyst√©rectomie") Then
            AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "Acte irr√©versible r√©p√©t√©", "CRITIQUE", _
                                 "Hyst√©rectomie r√©p√©t√©e - Impossible anatomiquement", _
                                 "Maximum 1 fois dans la vie", "R√©p√©tition d√©tect√©e", prixTotal, _
                                 "V√©rification dossier m√©dical urgente", "Imm√©diat", "URGENT"
            anomalies = anomalies + 1
        End If
    End If
    
    ControlerGynecologie = anomalies
End Function

Private Function ControlerMedicaments(nomPatient As String, codeActe As String, libelleFacture As String, _
                                     dateFacture As Date, quantite As Double, prixTotal As Double, _
                                     qtyMaxJour As Long, qtyMaxMois As Long) As Long
    Dim anomalies As Long
    anomalies = 0
    
    ' R√®gles pharmaceutiques (ANSM, Ordre pharmaciens)
    If quantite > qtyMaxJour Then
        AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "Posologie excessive", "√âLEV√â", _
                             "Quantit√© m√©dicament d√©passe posologie maximale autoris√©e", _
                             "Maximum " & qtyMaxJour & " unit√©s/jour", "Quantit√©: " & quantite, prixTotal, _
                             "V√©rifier prescription et posologie", "48h", "√âLEV√â"
        anomalies = anomalies + 1
    End If
    
    ControlerMedicaments = anomalies
End Function

Private Function ControlerAnesthesie(nomPatient As String, codeActe As String, libelleFacture As String, _
                                    dateFacture As Date, quantite As Double, prixTotal As Double, ligneFacture As Long) As Long
    Dim anomalies As Long
    anomalies = 0
    
    ' R√®gles anesth√©siques (SFAR)
    If Not VerifierActeChirurgicalAssocie(nomPatient, dateFacture, ligneFacture) Then
        AjouterAnomalieExpert nomPatient, codeActe, libelleFacture, "Anesth√©sie isol√©e", "CRITIQUE", _
                             "Anesth√©sie sans acte chirurgical associ√© - Protocole non conforme", _
                             "Anesth√©sie + acte chirurgical", "Anesth√©sie isol√©e", prixTotal, _
                             "V√©rifier protocole anesth√©sique", "Imm√©diat", "URGENT"
        anomalies = anomalies + 1
    End If
    
    ControlerAnesthesie = anomalies
End Function

' ===================================================================
' FONCTIONS UTILITAIRES EXPERTES
' ===================================================================

Private Function RechercherCodeParLibelle(libelle As String) As String
    Dim wsReferentiel As Worksheet
    Dim derniereLigne As Long, i As Long
    Dim libelleRef As String, similarite As Double
    
    Set wsReferentiel = ThisWorkbook.Worksheets(FEUILLE_REFERENTIEL)
    derniereLigne = wsReferentiel.Cells(wsReferentiel.Rows.Count, 1).End(xlUp).Row
    
    ' Recherche exacte d'abord
    For i = 2 To derniereLigne
        libelleRef = Trim(UCase(wsReferentiel.Cells(i, 2).Value))
        If libelleRef = Trim(UCase(libelle)) Then
            RechercherCodeParLibelle = wsReferentiel.Cells(i, 1).Value
            Exit Function
        End If
    Next i
    
    ' Recherche approximative (similarit√© > 80%)
    For i = 2 To derniereLigne
        libelleRef = Trim(UCase(wsReferentiel.Cells(i, 2).Value))
        similarite = CalculerSimilarite(Trim(UCase(libelle)), libelleRef)
        If similarite > 0.8 Then
            RechercherCodeParLibelle = wsReferentiel.Cells(i, 1).Value
            Exit Function
        End If
    Next i
    
    RechercherCodeParLibelle = ""
End Function

Private Function CalculerSimilarite(texte1 As String, texte2 As String) As Double
    ' Algorithme simple de similarit√© de cha√Ænes
    Dim longueurMin As Long, correspondances As Long, i As Long
    
    longueurMin = Application.WorksheetFunction.Min(Len(texte1), Len(texte2))
    If longueurMin = 0 Then
        CalculerSimilarite = 0
        Exit Function
    End If
    
    correspondances = 0
    For i = 1 To longueurMin
        If Mid(texte1, i, 1) = Mid(texte2, i, 1) Then
            correspondances = correspondances + 1
        End If
    Next i
    
    CalculerSimilarite = correspondances / Application.WorksheetFunction.Max(Len(texte1), Len(texte2))
End Function

Private Function DetecterDoublonIntelligent(nomPatient As String, codeActe As String, dateFacture As Date, ligneActuelle As Long) As Boolean
    Dim wsFactures As Worksheet
    Dim derniereLigne As Long, i As Long
    Dim nomPatientRef As String, codeActeRef As String, dateFactureRef As Date
    
    Set wsFactures = ThisWorkbook.Worksheets(FEUILLE_SAISIE)
    derniereLigne = wsFactures.Cells(wsFactures.Rows.Count, 1).End(xlUp).Row
    
    For i = 2 To derniereLigne
        If i <> ligneActuelle Then
            On Error Resume Next
            nomPatientRef = Trim(wsFactures.Cells(i, 2).Value)
            codeActeRef = Trim(wsFactures.Cells(i, 5).Value)
            dateFactureRef = CDate(wsFactures.Cells(i, 1).Value)
            On Error GoTo 0
            
            ' M√™me patient, m√™me acte, dates proches (‚â§ 7 jours)
            If UCase(nomPatientRef) = UCase(nomPatient) And _
               codeActeRef = codeActe And _
               Abs(dateFactureRef - dateFacture) <= 7 Then
                DetecterDoublonIntelligent = True
                Exit Function
            End If
        End If
    Next i
    
    DetecterDoublonIntelligent = False
End Function

Private Function VerifierCumulExcessif(nomPatient As String, codeActe As String, dateFacture As Date, _
                                      quantiteActuelle As Double, qtyMaxMois As Long, ligneActuelle As Long) As Boolean
    Dim wsFactures As Worksheet
    Dim derniereLigne As Long, i As Long
    Dim nomPatientRef As String, codeActeRef As String, dateFactureRef As Date, quantiteRef As Double
    Dim cumulMois As Double
    Dim debutMois As Date, finMois As Date
    
    Set wsFactures = ThisWorkbook.Worksheets(FEUILLE_SAISIE)
    derniereLigne = wsFactures.Cells(wsFactures.Rows.Count, 1).End(xlUp).Row
    
    ' D√©finir p√©riode du mois
    debutMois = DateSerial(Year(dateFacture), Month(dateFacture), 1)
    finMois = DateSerial(Year(dateFacture), Month(dateFacture) + 1, 0)
    
    cumulMois = quantiteActuelle
    
    For i = 2 To derniereLigne
        If i <> ligneActuelle Then
            On Error Resume Next
            nomPatientRef = Trim(wsFactures.Cells(i, 2).Value)
            codeActeRef = Trim(wsFactures.Cells(i, 5).Value)
            dateFactureRef = CDate(wsFactures.Cells(i, 1).Value)
            quantiteRef = CDbl(wsFactures.Cells(i, 8).Value)
            On Error GoTo 0
            
            ' M√™me patient, m√™me acte, m√™me mois
            If UCase(nomPatientRef) = UCase(nomPatient) And _
               codeActeRef = codeActe And _
               dateFactureRef >= debutMois And dateFactureRef <= finMois Then
                cumulMois = cumulMois + quantiteRef
            End If
        End If
    Next i
    
    VerifierCumulExcessif = (cumulMois > qtyMaxMois)
End Function

Private Sub AjouterAnomalieExpert(nomPatient As String, codeActe As String, libelleActe As String, _
                                 typeAnomalie As String, niveauGravite As String, description As String, _
                                 valeurAttendue As String, valeurTrouvee As String, montantConcerne As Double, _
                                 actionRecommandee As String, delaiAction As String, prioriteTraitement As String)
    Dim wsSurveillance As Worksheet
    Dim nouvelleLigne As Long
    
    Set wsSurveillance = ThisWorkbook.Worksheets(FEUILLE_SURVEILLANCE)
    nouvelleLigne = wsSurveillance.Cells(wsSurveillance.Rows.Count, 1).End(xlUp).Row + 1
    
    ' Ajouter donn√©es compl√®tes
    wsSurveillance.Cells(nouvelleLigne, 1).Value = Now()
    wsSurveillance.Cells(nouvelleLigne, 2).Value = nomPatient
    wsSurveillance.Cells(nouvelleLigne, 3).Value = codeActe
    wsSurveillance.Cells(nouvelleLigne, 4).Value = libelleActe
    wsSurveillance.Cells(nouvelleLigne, 5).Value = typeAnomalie
    wsSurveillance.Cells(nouvelleLigne, 6).Value = niveauGravite
    wsSurveillance.Cells(nouvelleLigne, 7).Value = description
    wsSurveillance.Cells(nouvelleLigne, 8).Value = valeurAttendue
    wsSurveillance.Cells(nouvelleLigne, 9).Value = valeurTrouvee
    wsSurveillance.Cells(nouvelleLigne, 10).Value = montantConcerne
    wsSurveillance.Cells(nouvelleLigne, 11).Value = "R√®gle m√©dicale viol√©e selon normes internationales"
    wsSurveillance.Cells(nouvelleLigne, 12).Value = actionRecommandee
    wsSurveillance.Cells(nouvelleLigne, 13).Value = delaiAction
    wsSurveillance.Cells(nouvelleLigne, 14).Value = "√Ä traiter"
    wsSurveillance.Cells(nouvelleLigne, 15).Value = ""
    wsSurveillance.Cells(nouvelleLigne, 16).Value = ""
    wsSurveillance.Cells(nouvelleLigne, 17).Value = "D√©tect√©e par syst√®me expert m√©dical"
    wsSurveillance.Cells(nouvelleLigne, 18).Value = prioriteTraitement
    wsSurveillance.Cells(nouvelleLigne, 19).Value = IIf(montantConcerne > 1000, "√âLEV√â", IIf(montantConcerne > 100, "MOD√âR√â", "FAIBLE"))
End Sub

' ===================================================================
' FONCTIONS UTILITAIRES SUPPL√âMENTAIRES
' ===================================================================

Private Function TrouverActeReferentiel(codeActe As String) As Long
    ' [Fonction existante - pas de modification]
    Dim wsReferentiel As Worksheet
    Dim derniereLigne As Long, i As Long
    
    Set wsReferentiel = ThisWorkbook.Worksheets(FEUILLE_REFERENTIEL)
    derniereLigne = wsReferentiel.Cells(wsReferentiel.Rows.Count, 1).End(xlUp).Row
    
    For i = 2 To derniereLigne
        If wsReferentiel.Cells(i, 1).Value = codeActe Then
            TrouverActeReferentiel = i
            Exit Function
        End If
    Next i
    
    TrouverActeReferentiel = 0
End Function

Private Function ObtenirPrixTarifaire(codeActe As String) As Double
    Dim ligneRef As Long
    ligneRef = TrouverActeReferentiel(codeActe)
    If ligneRef > 0 Then
        ObtenirPrixTarifaire = Val(ThisWorkbook.Worksheets(FEUILLE_REFERENTIEL).Cells(ligneRef, 17).Value)
    Else
        ObtenirPrixTarifaire = 0
    End If
End Function

Private Function CompterActesReferentiel() As Long
    Dim wsReferentiel As Worksheet
    Set wsReferentiel = ThisWorkbook.Worksheets(FEUILLE_REFERENTIEL)
    CompterActesReferentiel = wsReferentiel.Cells(wsReferentiel.Rows.Count, 1).End(xlUp).Row - 1
End Function

Private Function VerifierStructureComplete() As Boolean
    ' V√©rifier toutes les feuilles n√©cessaires
    Dim feuilles As Variant
    Dim i As Integer
    
    feuilles = Array(FEUILLE_REFERENTIEL, FEUILLE_SAISIE, FEUILLE_SURVEILLANCE, FEUILLE_VALIDATION, FEUILLE_ALERTES, FEUILLE_DASHBOARD)
    
    For i = 0 To UBound(feuilles)
        If Not FeuilleExiste(feuilles(i)) Then
            VerifierStructureComplete = False
            Exit Function
        End If
    Next i
    
    VerifierStructureComplete = True
End Function

Private Function FeuilleExiste(nomFeuille As String) As Boolean
    Dim ws As Worksheet
    On Error Resume Next
    Set ws = ThisWorkbook.Worksheets(nomFeuille)
    FeuilleExiste = Not ws Is Nothing
    On Error GoTo 0
End Function

' Fonctions m√©dicales sp√©cialis√©es (stubs - √† impl√©menter selon besoins)
Private Function VerifierExpositionRadiologique(nomPatient As String, codeActe As String, dateFacture As Date, quantite As Double) As Boolean
    ' Logique de v√©rification exposition radiologique
    VerifierExpositionRadiologique = False ' Placeholder
End Function

Private Function VerifierDelaiPostOperatoire(nomPatient As String, codeActe As String, dateFacture As Date, delaiMinJours As Long) As Boolean
    ' Logique de v√©rification d√©lai post-op√©ratoire
    VerifierDelaiPostOperatoire = False ' Placeholder
End Function

Private Function VerifierDoublonBiologique(nomPatient As String, codeActe As String, dateFacture As Date) As Boolean
    ' Logique de v√©rification doublon biologique
    VerifierDoublonBiologique = False ' Placeholder
End Function

Private Function DetecterIncoh√©renceAge(nomPatient As String, typeConsultation As String) As Boolean
    ' Logique de d√©tection incoh√©rence √¢ge
    DetecterIncoh√©renceAge = False ' Placeholder
End Function

Private Function VerifierActeIrreversible(nomPatient As String, codeActe As String, typeActe As String) As Boolean
    ' Logique de v√©rification acte irr√©versible
    VerifierActeIrreversible = False ' Placeholder
End Function

Private Function VerifierActeChirurgicalAssocie(nomPatient As String, dateFacture As Date, ligneFacture As Long) As Boolean
    ' Logique de v√©rification acte chirurgical associ√©
    VerifierActeChirurgicalAssocie = True ' Placeholder
End Function

Private Sub InitialiserBaseConnaissancesMedicales()
    ' Initialisation base de connaissances
End Sub

Private Sub ConfigurerAlertesAutomatiques()
    ' Configuration alertes
End Sub

Private Sub ActiverSurveillanceTempsReel()
    ' Activation surveillance
End Sub

Private Sub EffacerAnciennesAnomalies()
    ' Effacement anciennes anomalies
End Sub

Private Sub EffectuerAnalysesComplementaires()
    ' Analyses compl√©mentaires
End Sub

Private Sub FormaterResultatsExpert()
    ' Formatage r√©sultats
End Sub

Private Sub MettreAJourDashboardExpert()
    ' Mise √† jour dashboard
End Sub

Private Sub GenererAlertesAutomatiques(nombreCritiques As Long)
    ' G√©n√©ration alertes
End Sub

Private Sub EnregistrerDansHistorique(nbFactures As Long, nbAnomalies As Long, duree As Double)
    ' Enregistrement historique
End Sub

